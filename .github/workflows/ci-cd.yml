name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "–¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!" && exit 0
    - uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['test-passed']
          })

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/antivirus@v1
    - run: echo "–õ–∏–Ω—Ç–µ—Ä –∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –ø—Ä–æ—à–ª–∏!" && exit 0
    - uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['sec-passed']
          })

  version-update:
    needs: security
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "CURRENT_VERSION=$(cat version)" >> $GITHUB_ENV
    - name: –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
      run: |
        if [[ $GITHUB_HEAD_REF == feature/* ]]; then
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{printf "%d.%d.%d", $1, $2+1, $3}')
          TYPE="minor"
        elif [[ $GITHUB_HEAD_REF == hotfix/* ]]; then
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{printf "%d.%d.%d", $1, $2, $3+1}')
          TYPE="patch"
        else
          NEW_VERSION=$CURRENT_VERSION
          TYPE="none"
        fi
        echo "$NEW_VERSION" > version
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    - run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add version
        git commit -m "[$NEW_VERSION] < [$CURRENT_VERSION] $TYPE up"
        git push
    - uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: [process.env.NEW_VERSION]
          })

  changelog:
    needs: version-update
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "# $(cat version) ($(date +%Y-%m-%d))" > temp_changelog.md
    - run: echo "- –í–µ—Ç–∫–∞: $GITHUB_HEAD_REF" >> temp_changelog.md
    - run: echo "" >> temp_changelog.md
    - run: cat changelog.md >> temp_changelog.md && mv temp_changelog.md changelog.md
    - run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git add changelog.md
        git commit -m "–û–±–Ω–æ–≤–ª–µ–Ω changelog"
        git push
    - uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['changelog']
          })

  docker-publish:
    needs: changelog
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "VERSION=$(cat version)" >> $GITHUB_ENV
    - uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/mediaplayer:${{ env.VERSION }}
    - uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['dockerhub']
          })

  notify:
    needs: docker-publish
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "VERSION=$(cat version)" >> $GITHUB_ENV
    - uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          üöÄ –í—ã—à–ª–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è ${{ env.VERSION }}!
          üì¶ Docker: ${{ secrets.DOCKER_HUB_USERNAME }}/mediaplayer:${{ env.VERSION }}
          üìù Changelog –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω
        files: changelog.md

  deploy:
    needs: notify
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "VERSION=$(cat version)" >> $GITHUB_ENV
    - run: |
        echo "version: '3'" > docker-compose.yml
        echo "services:" >> docker-compose.yml
        echo "  mediaplayer:" >> docker-compose.yml
        echo "    image: ${{ secrets.DOCKER_HUB_USERNAME }}/mediaplayer:${{ env.VERSION }}" >> docker-compose.yml
        echo "    ports:" >> docker-compose.yml
        echo "      - \"8080:80\"" >> docker-compose.yml
    - run: docker-compose up -d
    - uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['PROD']
          })

  release:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: echo "VERSION=$(cat version)" >> $GITHUB_ENV
    - uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: –í–µ—Ä—Å–∏—è ${{ env.VERSION }}
        body: |
          –ß—Ç–æ –Ω–æ–≤–æ–≥–æ:
          - –í–µ—Ç–∫–∞: $GITHUB_HEAD_REF
          - –°–º–æ—Ç—Ä–∏ changelog.md
        draft: false
        prerelease: false